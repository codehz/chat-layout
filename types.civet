export DynValue<C < CanvasRenderingContext2D, T> ::=
  if T < Function
    never
  else
    T | ((context: C) -> T)

export RendererOptions ::=
  splitText(text: string): string[]

export interface ContextHelper

export interface Context<C < CanvasRenderingContext2D> < RendererOptions, ContextHelper
  graphics: C
  remainingWidth: number

  measureNode(node: Node<C>): Box
  invalidateNode(node: Node<C>): void
  resolveDynValue<T>(value: DynValue<C, T>): T

  with<T>(this: Context<C>, cb: (g: C) => T): T

export Box ::=
  width: number
  height: number

export HitTest ::=
  x: number
  y: number
  type: "click" | "auxclick" | "hover"

export interface Node<C < CanvasRenderingContext2D>
  measure(ctx: Context<C>): Box
  draw(ctx: Context<C>, x: number, y: number): boolean
  hittest(ctx: Context<C>, test: HitTest): boolean
  readonly flex: boolean
