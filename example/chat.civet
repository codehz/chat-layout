{ ChatRenderer, memoRenderItem, Wrapper, MultilineText, Text, PaddingBox, AlignBox, HStack, VStack, Fixed, ListState, type DynValue, type Node, type Context, type RenderFeedback } from ".."
{ LoremIpsum } from "lorem-ipsum"

C ::= CanvasRenderingContext2D

class RoundedBox < PaddingBox<C>
  readonly radii: number | DOMPointInit | (number | DOMPointInit)[]
  readonly stroke: DynValue C, string?
  readonly fill: DynValue C, string?

  @(
    inner: Node<C>
    { @radii, @stroke, @fill, ...options}:
      top?: number
      bottom?: number
      left?: number
      right?: number
      stroke?: DynValue C, string?
      fill?: DynValue C, string?
      radii: number | DOMPointInit | (number | DOMPointInit)[]
  )
    super(inner, options)

  draw(ctx: Context<C>, x: number, y: number): boolean
    { width, height } := ctx.measureNode @
    ctx.with (g) =>
      fill := ctx.resolveDynValue @fill if @fill?
      stroke := ctx.resolveDynValue @stroke if @stroke?
      g.beginPath()
      g.roundRect x, y, width, height, @radii
      g.fillStyle = fill if fill?
      g.strokeStyle = stroke if stroke?
      g.fill() if fill?
      g.stroke() if stroke?
    super.draw ctx, x, y

class Circle < Fixed<C>
  @(readonly size: number, readonly options: { fill: DynValue C, string })
    super size, size

  draw(ctx: Context<C>, x: number, y: number): boolean
    ctx.with (g) =>
      g.fillStyle = ctx.resolveDynValue @options.fill
      g.beginPath()
      radius := @size / 2
      g.arc x + radius, y + radius, radius, 0, 2 * Math.PI, false
      g.fill()
    false

function button(text: string, action: =>)
  btn := document.createElement "button" ||> document.body.appendChild
  btn.textContent = text
  btn.onclick = action

canvas := document.createElement "canvas" ||> document.body.appendChild
canvas.width = canvas.clientWidth * devicePixelRatio
canvas.height = canvas.clientHeight * devicePixelRatio
unless ctx? := canvas.getContext "2d"
  throw new Error "Failed to initial canvas"
ctx.scale(devicePixelRatio, devicePixelRatio)

ChatItem ::=
  sender: string
  content: string

let current_hover: ChatItem?

class HoverDetector < Wrapper<C>
  @(inner: Node<C>, @item: ChatItem)
    super inner

  hittest()
    current_hover = @item
    true

renderItem := memoRenderItem (item: ChatItem) =>
  new HStack
    . new Circle 32, fill: "red"
    . new VStack
        . new HStack
            . new Text item.sender, lineHeight: 15, font: "12px system-ui", style: "black"
              |> new RoundedBox ., top: 0, bottom: 0, left: 0, right: 0, radii: 2, fill: => current_hover == item ? "red" : "transparent"
            . new Circle 15, fill: "blue"
              |> new HoverDetector ., item
            gap: 4
            reverse: item.sender == 'A'
        . new MultilineText item.content, lineHeight: 20, font: "16px system-ui", style: "black", alignment: "left"
          |> new RoundedBox ., top: 6, bottom: 6, left: 10, right: 10, radii: 8, fill: => current_hover == item ? "#aaa" : "#ccc"
        alignment: item.sender == 'A' ? 'right' : 'left'
    . new Fixed 32, 0
    gap: 4
    reverse: item.sender == 'A'
  |> new PaddingBox ., top: 4, bottom: 4, left: 4, right: 4
  |> new AlignBox ., alignment: item.sender == 'A' ? 'right' : 'left'

list := new ListState<ChatItem>

renderer := new ChatRenderer ctx, {}
  splitText(text) text.split ""
  renderItem
  list

requestAnimationFrame function fn
  feedback: RenderFeedback := minIdx: NaN, maxIdx: NaN
  renderer.render(feedback)
  requestAnimationFrame fn

canvas.addEventListener "wheel", (e) =>
  list.applyScroll -e.deltaY

canvas.addEventListener "pointermove", (e) =>
  { top, left } := canvas.getBoundingClientRect()
  result := renderer.hittest
    x: e.clientX - left
    y: e.clientY - top
    type: "hover"
  if !result
    current_hover = undefined

lorem := new LoremIpsum

list.pushAll
  . sender: "A"
    content: lorem.generateWords 20
  . sender: "B"
    content: "aaaa"
  . sender: "B"
    content: "aaaabbb"
  . sender: "B"
    content: "测试中文"
  . sender: "B"
    content: "测试aa中文aaa"
  . sender: "B"
    content: lorem.generateWords 5

button "unshift", =>
  list.unshift
    sender: Math.random() < 0.5 ? "A" : "B"
    content: lorem.generateWords 10 + Math.floor(20 * Math.random())

button "push", =>
  list.push
    sender: Math.random() < 0.5 ? "A" : "B"
    content: lorem.generateWords 10 + Math.floor(20 * Math.random())

button "scrollToBottom", =>
  renderer.scrollToBottom()